security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        app_user_provider:
            entity:
                class: Core\Entity\User\User
                property: email
    role_hierarchy:
        ROLE_ADMIN: [ ROLE_USER ]
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        cors:
            security: false
            pattern: ^/
            methods: [ OPTIONS ]

        password_auth:
            pattern: ^/api/(v1|v2)/(token|reset-password|change-password)
            security: false

        google_auth:
            pattern: ^/api/(v1|v2)/token/google
            security: false

        register:
            pattern: ^/api/(v1|v2)/users/register
            methods: [ POST ]
            security: false

        activate:
            pattern: ^/api/(v1|v2)/users/activate
            methods: [ PUT ]
            security: false

        email_auth:
            pattern: ^/api/(v1|v2)/(request-email-token|email-token)
            security: false

        magic_link_auth:
            pattern: ^/api/(v1|v2)/magic-links
            security: false

        registration:
            pattern: ^/api/(v1|v2)/(register|social-register|request-social-merge)
            security: false

        documentation:
            pattern: ^/api/docs
            security: false

        healthcheck:
            pattern: ^/health
            security: false

        api:
            security: true
            pattern: ^/api
            stateless: true
            entry_point: Core\Security\HeaderAuthenticator
            custom_authenticators:
                - Core\Security\HeaderAuthenticator

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/login, roles: PUBLIC_ACCESS }
        - { path: ^/api/v1/users/activate, roles: PUBLIC_ACCESS }
        - { path: ^/api, roles: ROLE_USER }
        - { path: ^/, roles: PUBLIC_ACCESS } # comment this line out if frontend is not behind login.

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
